open_from_drive_mode_init :: fn () {
	// Activate command buffer.
	active_editor = command_editor;
	buf :: get_active_buffer_and_editor();
	clear_buffer(buf);

	input_mode               = InputMode.TEXT;
	notify_changes_to_buffer = buf.index;

	base_path = std.get_cwd();
	err :: list_directory(tprint("%/", base_path));
	if err {
		print_err(err);
	}
}

open_from_drive_mode_terminate :: fn () {
	active_editor = command_editor;
	std.str_delete(&base_path);
}

draw_open_from_drive_mode :: fn () {
	get_title :: fn () string_view #inline {
		if base_path.len == 0 && PLATFORM == Platform.WINDOWS {
			return "Open: ";
		}
		return tprint("Open: %/", base_path);
	};

	assert(active_editor == command_editor);
	w, h :: get_command_editor_size();

	draw_command_editor(command_editor, 0.f, 0.f, w, h, get_title());

	using DrawListCols;
	list_h, clicked :: draw_list(0.f, h, w, ICON | TITLE);
	draw_last_status_message(0.f, h + list_h, w);

	if clicked {
		commit();
	}
}

//
// Commands
//

invoke_command_open_from_drive_mode :: fn (buf: *Buffer, cmd: Command) bool {
	assert(active_editor == command_editor);
	assert(editors[active_editor].buffer_index == buf.index);
	editor :: &editors[active_editor];

	using Command;

	switch cmd {
		INSERT_NEW_LINE { commit(); }

		DELETE_CHAR_LEFT {
			position :: get_cursor_position(buf, editor.cursor_index);
			if position != 0 {
				// Command not handled.
				return false;
			}
			dir_up(&base_path);
		}

		MOVE_UP   { list_item_up();   }
		MOVE_DOWN { list_item_down(); }

		// Not handled.
		default { return false; }
	}

	return true;
}

open_from_drive_cmd_changed :: fn () {
	buf :: get_active_buffer_and_editor();
	user_path :: peek_row(buf, 0);
	if user_path.len == 0 {
		clear_list_filters();
		return;
	}

	filter_list(user_path);
}

#private

base_path: string;

commit :: fn () {
	using std;
	buf :: get_active_buffer_and_editor();

	item :: get_selected_item_in_list();
	if !item { return; }

	path: string_view #noinit;
	if base_path.len == 0 && PLATFORM == Platform.WINDOWS {
		path = tprint(item.title);
	} else {
		path = tprint("%/%", base_path, item.title);
	}
	clear_buffer(buf);

	if (item.flags & ItemFlags.DIRECTORY) == ItemFlags.DIRECTORY {
		err :: list_directory(tprint("%/", path));
		if err {
			print_err(err);
			return;
		}

		base_path.len = 0;
		str_append(&base_path, path);

		//set_cwd(base_path);
	} else {
		set_mode(Mode.TEXT_EDIT);
		err :: open(path);
		if err { print_err(err); }
	}
}
