search_in_project_mode_init :: fn () {
	using std;

	active_editor = command_editor;
	buf, editor :: get_active_buffer_and_editor();
	clear_buffer(buf);

	input_mode               = InputMode.TEXT;
	notify_changes_to_buffer = buf.index;

	target_buf, target_editor :: get_last_active_buffer_and_editor();

	initial_subject := peek_selection(target_buf, target_editor.cursor_index);
	clear_selection(target_buf, target_editor.cursor_index);

	if initial_subject.len == 0 || is_multiline(initial_subject) {
		initial_subject = search.last_subject;
	}

	subject.len = 0;
	if initial_subject.len > 0 {
		str_append(&subject, initial_subject);
		insert_string(buf, 0, initial_subject);
		select_all(editor, buf);
	}

	print_log("Search for: '%'", subject);
	err :: list_async_search(subject, true);
	if err {
		print_err(err);
	} else if settings.show_hints {
		result_to_buffer_binding :: get_keybinding_for_command(Command.SEARCH_TO_BUFFER);
		next_binding             :: get_keybinding_for_command(Command.MOVE_DOWN);
		prev_binding             :: get_keybinding_for_command(Command.MOVE_UP);
		hint :: tprint("[%] next match\t[%] prev match\t[%] show results in buffer", next_binding, prev_binding, result_to_buffer_binding);
		print_info(hint);
	}
}

search_in_project_mode_terminate :: fn () {
	using std;
	cancel_async_search();
	str_delete(&subject);
}

draw_search_in_project_mode :: fn () {
	assert(active_editor == command_editor);

	if project.is_indexing {
		print_warn(PROJECT_IS_INDEXING_MESSAGE);
		set_mode(Mode.TEXT_EDIT);
		return;
	}

	w, h :: get_command_editor_size();
	draw_command_editor(command_editor, 0.f, 0.f, w, h, tprint("Search in %: ", project.name));

	is_running, progress :: get_async_search_progress();
	if is_running {
		using draw;
		set_shader_color();
		rect(0.f, h-2.f, w * progress, 2.f, colors.warning_color);
	}

	using DrawListCols;
	list_h, clicked :: draw_list(0.f, h, w, ICON | TITLE | HINT | PREVIEW);
	draw_last_status_message(0.f, h + list_h, w);
	if clicked { commit(); }
}

//
// Commands
//

invoke_command_search_in_project_mode :: fn (buf: *Buffer #maybe_unused, cmd: Command) bool {
	assert(active_editor == command_editor);
	assert(editors[active_editor].buffer_index == buf.index);

	using std;
	using Command;

	switch cmd {
		SEARCH_TO_BUFFER,
		INSERT_NEW_LINE {
			if cmd == SEARCH_TO_BUFFER {
				search.last_subject.len = 0;
				std.str_append(&search.last_subject, subject);

				target_buf :: get_active_buffer_and_editor();
				if target_buf.index == search_buffer_index {
					print_warn("Search results buffer is already open.");
				} else {
					tmp := str_new(1024, application_context.temporary_allocator);
					format_async_search_results_to_string(&tmp);
					if search.results.len == 0 {
						str_append(&tmp, tprint("No match for subject '%'", subject));
					}
					set_mode(Mode.TEXT_EDIT);

					print_log("Open results in the buffer!");
					results_editor_index :: find_or_create_editor_with_buffer_in_other_split(&search_buffer_index, "search");
					results_buf    :: &buffers[search_buffer_index];
					results_editor :: &editors[results_editor_index];

					clear_buffer(results_buf);
					append_readonly_buffer(results_buf, tmp);
					set_cursor_position(results_buf, results_editor.cursor_index, 0);
				}
			} else {
				commit();
			}
		}

		MOVE_UP   { list_item_up();   }
		MOVE_DOWN { list_item_down(); }

		default { return false; }
	}

	return true;
}

search_in_project_cmd_changed :: fn () {
	using std;

	buf :: get_active_buffer_and_editor();
	new_subject :: peek_row(buf, 0);
	subject.len = 0;
	str_append(&subject, new_subject);
	err :: list_async_search(subject);
	if err { print_err(err); }
}

#private

subject: string;

commit :: fn () {
	search.last_subject.len = 0;
	std.str_append(&search.last_subject, subject);

	item :: get_selected_item_in_list();
	if !item { return; }

	set_mode(Mode.TEXT_EDIT);
	err :: open(tprint("%/%", item.hint, item.title));
	if err {
		print_err(err);
		return;
	}
	target_buffer, target_editor :: get_active_buffer_and_editor();
	target_buffer.cursors[target_editor.cursor_index].position = item.index;
}


